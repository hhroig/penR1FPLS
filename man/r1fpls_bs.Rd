% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/r1fpls_bs.R
\name{r1fpls_bs}
\alias{r1fpls_bs}
\title{Penalized rank-one functional PLS using fda-package basis (B-spline basis as default)}
\usage{
r1fpls_bs(
  X,
  Y,
  argvals,
  ncomp = 3,
  center = TRUE,
  basisobj,
  penalty = 0,
  tol = .Machine$double.eps^0.5,
  verbose = TRUE,
  stripped = FALSE,
  ...
)
}
\arguments{
\item{X}{a number of observations times nodes matrix.}

\item{Y}{a number of observations times reponses matrix.}

\item{argvals}{a set of argument values.}

\item{ncomp}{number of components, integer.}

\item{center}{logical, indicating if data should be to centered.}

\item{basisobj}{a basis object from package \code{fda}.}

\item{penalty}{a vector of size ncomp indicating the penalty for each component.}

\item{tol}{convergence tolerance.}

\item{verbose}{logical, indicating if messages should be printed.}

\item{stripped}{logical.  If \code{TRUE} the calculations are stripped as
much as possible for speed; this is meant for use with cross-validation or
simulations when only the coefficients are needed.  Defaults to
\code{FALSE}. Inspired by package \code{pls}.}

\item{...}{further arguments.  Currently not used}
}
\value{
an r1fpls_bs model.
}
\description{
Penalized rank-one functional PLS using fda-package basis (B-spline basis as default)
}
\examples{
# 1D example:
# library(pls)
# library(fda)

# Octane number:
Y <- as.matrix( pls::gasoline$octane )

# Gasoline NIR spectra:
X <- as.matrix( as.data.frame( pls::gasoline$NIR ) )

# Wavenumber:
argvals <- seq(900, 1700, by = 2)

# Ruppert's law:  nbasis = nbreaks + norder - 2  and norder = degree + 1
n_breaks <- min(round(length(argvals)/4), 40)
n_basis <- n_breaks + (3+1) - 2

# B-spline basis:
bs_basis <- fda::create.bspline.basis(rangeval = range(argvals),
                                 nbasis = n_basis)



res_ps <-  r1fpls_bs(X = X, Y = Y, argvals = argvals,
                ncomp = 3, center = TRUE, penalty = 100,
                basisobj = bs_basis, stripped = FALSE)

predict(res_ps, newdata = X)
}
